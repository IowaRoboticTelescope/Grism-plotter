#!/usr/bin/env python

# Version: 16 Nov 2016

from Tkinter import *
from PIL import Image, ImageTk
import pyfits
import tkFileDialog
from subprocess import call
import os
import os.path

class Example(Frame):
  
    def __init__(self, parent):
        Frame.__init__(self, parent)   
         
        self.parent = parent
        self.initUI()     
    def initUI(self):
		def button_go_callback():
			""" what to do when the "Go" button is pressed """
			if not os.path.isfile(self.lblImageVar.get()):
				statusText.set("Please select a valid FITS image")
				return
			command = "/usr/local/bin/plot-grism"
			command = command + " -b " + fromWavelengthEntry.get()
			command = command + " -e " + toWavelengthEntry.get()
			if os.path.isfile(lblCalibrationEntry.get()):
				command = command + " -c \"" + lblCalibrationEntry.get() + "\""
			if os.path.isfile(lblSpectrumEntry.get()):
				command = command + " -r \"" + lblSpectrumEntryget() + "\""
			command = command + " -H " + self.SmoothingVar.get()
			command = command + " -z " + redshiftEntry.get()
			command = command + " -P " + str(self.plotchoiceVar.get())
			command = command + " -t " + tweakStarPositionEntry.get()
			command = command + " -w " + spectrumWidthEntry.get()
			command = command + " -y " + str(yAxisEntry.get())
			#command = command + " -W " + weightingVar.get().lower() 
			if self.verboseOutputVar.get():
				command = command + " -v "
			if self.doBalmer.get():
				command = command + " -B "
			if self.doNitrogen.get():
				command = command + " -N "
			if self.doCarbon.get():
				command = command + " -C "
			if self.doOxygen.get():
				command = command + " -O "
			if self.doHelium.get():
				command = command + " -E "
			command = command + " -p " + str( self.plotFileTypeVar.get())
			command = command + " \"" + self.lblImageVar.get() + "\""			
			print(command)
			os.system(command)
			imagepath = objectOutputLabel.get()
			if self.plotFileTypeVar.get() == 0:
				if self.plotchoiceVar.get() == 2:
					imagepath = imagepath + "-2x2.png"
				else:
					imagepath = imagepath + ".png"	
			if self.plotFileTypeVar.get() == 1:
				if self.plotchoiceVar.get() == 2:
					imagepath = imagepath + "-2x2.pdf"
				else:
					imagepath = imagepath + ".pdf"
			if os.path.isfile(imagepath):
				dispcom = "display " + imagepath
				os.system(dispcom)
			
		def button_browse_callback():
			""" What to do when the Browse button is pressed """
			objectOutputLabel.delete(0, END)
			filename = tkFileDialog.askopenfilename(filetypes = [("FITS","*.fts")])
			if not filename:
				return
			lblImageEntry.delete(0, END)
			lblImageEntry.insert(0, filename)
			input_file = lblImageEntry.get()
			if input_file.rsplit(".")[-1] != "fts" and input_file.rsplit(".")[-1] != "fits":
				statusText.set("Filename must end in `.fts' or '.fits'")
				return
			table_contents = pyfits.open(input_file)
			if table_contents is None:
				statusText.set("Error reading file `{}'".format(input_file))
				return
			objectName.set("Object Name: " + table_contents[0].header['OBJECT'])
			objectRA.set("Object RA: " + table_contents[0].header['RA'])
			objectDEC.set("Object Dec: " + table_contents[0].header['DEC'])
			objectDate.set("Date/Time: " + table_contents[0].header['DATE-OBS'])
			objectEXPTIME.set("Exposure Time: " + str(table_contents[0].header['EXPTIME']))
			objectFilterVar.set("Filter: : " + str(table_contents[0].header['FILTER']))
			D = table_contents[0].header['DATE-OBS']
			date = D[0:10]
			ut = D[11:]
			pathlist = input_file.rsplit("/")
			path = "/"

			for i in range(1, len(pathlist) - 1):
				path = path + pathlist[i] + "/"
			objectnamefile = table_contents[0].header['OBJECT'].replace(" ","")
			objectOutputLabel.insert(0,(path + objectnamefile + "_" + str(date) + "_" + str(ut.replace(':','')[0:-2])))

		def button_browsecalibration_callback():
			""" What to do when the Browse button is pressed """
			filenamecalibration = tkFileDialog.askopenfilename()
			if not filenamecalibration:
				return
			lblCalibrationEntry.delete(0, END)
			lblCalibrationEntry.insert(0, filenamecalibration)
			input_file = lblCalibrationEntry.get()
			if input_file.rsplit(".")[-1] != "fts" and input_file.rsplit(".")[-1] != "csv":
				statusText.set("Filename must end in `.csv'")
				return	
		def button_browsespectrum_callback():
			""" What to do when the Browse button is pressed """
			filenamespectrum = tkFileDialog.askopenfilename()
			if not filenamespectrum:
				return
			lblSpectrumEntry.delete(0, END)
			lblSpectrumEntry.insert(0, filenamespectrum)
			input_file = lbl.get()
		def button_about_callback():
			top = Toplevel()
			top.title("About this application...")
			about_message = "About this application"
			msg = Label(top, text=about_message)
			msg.pack()
			self.about = ImageTk.PhotoImage(Image.open("/usr/local/grism/about.gif"))
			aboutImage = Label(top, image=self.about, anchor="center")
			aboutImage.image = self.about
			aboutImage.pack()

			button = Button(top, text="Close", command=top.destroy)
			button.pack()
		#Object hover statusText changers	
		def hoveryminmax(event):
			statusText.set("Enter the Y-Axis Min/Max")
		def hoverwavelengthFrame(event):
			statusText.set("Enter the Min and Max Wavelengths")
		def hoverPlotLines(event):
			statusText.set("Choose which spectral lines to plot")
		def hoverRedShift(event):
			statusText.set("Enter the red shift value")		





		self.parent.title("Plot Grism")
		self.pack(fill=BOTH, expand=True)
		self.configure(bg = '#feffbe')
		self.columnconfigure(1, weight=1)
		self.columnconfigure(3, pad=7)
		self.rowconfigure(0, weight=1)
		self.rowconfigure(1, weight=1)
		self.rowconfigure(2, weight=1)
		self.rowconfigure(3, weight=1)
		self.rowconfigure(5, weight=2)
		self.rowconfigure(7, pad=7)
		fitsFrame = LabelFrame(self, text="Enter or browse to FITS image path:")
		fitsFrame.configure(bg = '#feffbe')
		fitsFrame.grid(row=1, column=0, columnspan=3,
			padx=5, rowspan=1, sticky=E+W+S+N)
		calibrationFrame = LabelFrame(self, text="Enter or browse to calibration .csv path:")
		calibrationFrame.configure(bg = '#feffbe')
		spectrumFrame = LabelFrame(self, text="Enter or browse to reference spectrum .csv path:")
		spectrumFrame.configure(bg = '#feffbe')
		
		self.lblImageVar = StringVar()
		self.lblImageVar.set("Enter path or Browse to FITS Image" )
		lblImageEntry = Entry(fitsFrame, width=70, textvariable=self.lblImageVar)
		lblImageEntry.grid(row=1, column=0, sticky=W, pady=4, padx=5)

		lblCalibrationEntry = Entry(calibrationFrame, width=70)
		lblCalibrationEntry.insert(0, "")
		lblCalibrationEntry.grid(row=1, column=0, sticky=W, pady=4, padx=5)

		lblSpectrumEntry = Entry(spectrumFrame, width=70)
		lblSpectrumEntry.insert(0, "")
		lblSpectrumEntry.grid(row=1, column=0, sticky=W, pady=4, padx=5)
		
		
		#Details Label Frame objects
		details = LabelFrame(self, text="FITS Details")
		details.grid(row=4, column=1,
			padx=5, rowspan=2, columnspan=2, sticky=E+W+S+N)
		details.configure(bg = '#feffbe')
		details.rowconfigure(6, weight=1)
		objectName = StringVar(details)
		objectName.set("Object Name:")
		objName = Label(details, textvariable=objectName)
		objName.grid(row=0, column=0, sticky=W)
		objName.configure(bg = '#feffbe')
		objectRA = StringVar(details)
		objectRA.set("Object RA:")
		objRA = Label(details, textvariable=objectRA)
		objRA.grid(row=1, column=0, sticky=W)
		objRA.configure(bg = '#feffbe')
		objectDEC = StringVar(details)
		objectDEC.set("Object DEC:")
		objDEC = Label(details, textvariable=objectDEC)
		objDEC.grid(row=2, column=0, sticky=W)
		objDEC.configure(bg = '#feffbe')
		objectDate = StringVar(details)
		objectDate.set("Date/Time:")
		objDateLabel = Label(details, textvariable=objectDate)
		objDateLabel.grid(row=3, column=0, sticky=W)
		objDateLabel.configure(bg = '#feffbe')
		objectEXPTIME = StringVar(details)
		objectEXPTIME.set("Exposure Time:")
		objEXPTIMELabel = Label(details, textvariable=objectEXPTIME)
		objEXPTIMELabel.grid(row=4, column=0, sticky=W)
		objEXPTIMELabel.configure(bg = '#feffbe')
		objectOutputVar = StringVar()
		objectOutputLabel = Entry(details, textvariable=objectOutputVar)
		objectFilterVar = StringVar(details)
		objectFilterVar.set("Filter:")
		objFilterLabel = Label(details, textvariable=objectFilterVar)
		objFilterLabel.grid(row=5, column=0, sticky=W)
		objFilterLabel.configure(bg = '#feffbe')
		#GrismGUI logo display
		self.photo = ImageTk.PhotoImage(Image.open("/usr/local/grism/UofI-logo.gif"))
		logo = Label(details, image=self.photo, anchor="center")
		logo.image = self.photo
		logo.grid(row=6,column=0,columnspan=3, sticky=S)

		
		options = LabelFrame(self, text="Options")
		options.grid(row=4, column=0,
			padx=5, sticky=E+W+S+N)
		options.configure(bg = '#feffbe')
		
		wavelengthFrame = Frame(options)
		wavelengthFrame.configure(bg = '#feffbe')
		wavelengthFrame.grid(column=0,row=0,sticky=W)
		wavelengthFrame.bind("<Enter>", hoverwavelengthFrame)
		fromWavelengthLabel = Label(wavelengthFrame, text="Wavelength from")
		fromWavelengthLabel.grid(row=0, column=0, sticky=E)
		fromWavelengthLabel.configure(bg = '#feffbe')
		fromWavelengthVar = StringVar(wavelengthFrame)
		fromWavelengthEntry = Spinbox(wavelengthFrame, from_=380, to=750, width=5)
		fromWavelengthEntry.delete(0, END)
		fromWavelengthEntry.insert(0, "380")
		fromWavelengthEntry.grid(row=0, column=1)
		fromWavelengthEntry.configure(bg = '#feffbe')

		
		toWavelengthLabel = Label(wavelengthFrame, text="to")
		toWavelengthLabel.grid(row=0, column=2)
		toWavelengthLabel.configure(bg = '#feffbe')
		toWavelengthVar = StringVar(wavelengthFrame)
		toWavelengthEntry = Spinbox(wavelengthFrame, from_=380, to=750, width=5)
		toWavelengthEntry.delete(0, END)
		toWavelengthEntry.insert(0, "750")
		toWavelengthEntry.grid(row=0, column=3)
		toWavelengthEntry.configure(bg = '#feffbe')
		
		nmWavelengthLabel = Label(wavelengthFrame, text="nm")
		nmWavelengthLabel.grid(row=0, column=4, sticky=W)
		nmWavelengthLabel.configure(bg = '#feffbe')
		
		plotLinesFrame = Frame(options)
		plotLinesFrame.configure(bg = '#feffbe')
		plotLinesFrame.grid(row=1,column=0, sticky=W)
		plotLinesFrame.bind("<Enter>",hoverPlotLines)
		plotLinesVar = IntVar(plotLinesFrame)
		plotLinesLabel = Label(plotLinesFrame, bg = '#feffbe', text="Plot lines:")
		plotLinesLabel.grid(row=0,column=0)
		
		self.doBalmer = BooleanVar()
		self.doBalmer.set(False)
		doBalmerCheck=Checkbutton(plotLinesFrame, bg = '#feffbe', text="Balmer", variable=self.doBalmer, offvalue=False, onvalue=True).grid(row=0,column=1)
		self.doCarbon = BooleanVar()
		self.doCarbon.set(False)
		doCarbonCheck=Checkbutton(plotLinesFrame, bg = '#feffbe', text="Carbon", variable=self.doCarbon, offvalue=False, onvalue=True).grid(row=0,column=2)
		self.doNitrogen = BooleanVar()
		self.doNitrogen.set(False)
		doNitrogenCheck=Checkbutton(plotLinesFrame, bg = '#feffbe', text="Nitrogen", variable=self.doNitrogen, offvalue=False, onvalue=True).grid(row=0,column=3)
		self.doOxygen = BooleanVar()
		self.doOxygen.set(False)
		doOxygenCheck=Checkbutton(plotLinesFrame, bg = '#feffbe', text="Oxygen", variable=self.doOxygen, offvalue=False, onvalue=True).grid(row=0,column=4)
		self.doHelium = BooleanVar()
		self.doHelium.set(False)
		doHeliumCheck=Checkbutton(plotLinesFrame, bg = '#feffbe', text="Helium", variable=self.doHelium, offvalue=False, onvalue=True).grid(row=0,column=5)
		
		smoothingWindowFrame = Frame(options)
		smoothingWindowFrame.grid(row=2,column=0, sticky=W)
		smoothingWindowFrame.configure(bg = '#feffbe')
		SmoothingLabel= Label(smoothingWindowFrame, bg = '#feffbe', text="Smoothing Window Width:")
		SmoothingLabel.grid(row=0, column=0)
		
		self.SmoothingVar = StringVar(smoothingWindowFrame)
		SmoothingEntry = Entry(smoothingWindowFrame, bg = '#feffbe', width=5, textvariable=self.SmoothingVar)
		SmoothingEntry.insert(0, "1")
		SmoothingEntry.grid(row=0, column=1)
		
		SmoothingNMlabel= Label(smoothingWindowFrame, bg = '#feffbe', text="nm")
		SmoothingNMlabel.grid(row=0,column=2)
		
		weightingFrame = Frame(options)
		weightingFrame.configure(bg = '#feffbe')
		weightingVar = StringVar(weightingFrame)
		weightingVar.set("Hanning")
		weightingLabel = Label(weightingFrame, bg = '#feffbe', text="Weighting Option:")
		weightingLabel.grid(row=0,column=0)
		weightingOption = OptionMenu(weightingFrame, weightingVar, "Flat", "Hanning", "Hamming", "Blackmann")
		weightingOption.grid(row=0,column=1)
		
		tweakStarPositionFrame = Frame(options, bg = '#feffbe')
		tweakStarPositionLabel= Label(tweakStarPositionFrame, bg = '#feffbe', text="Tweak Star Position:")
		tweakStarPositionLabel.grid(row=0,column=0)
		tweakStarPositionVar = StringVar(tweakStarPositionFrame)
		tweakStarPositionEntry = Entry(tweakStarPositionFrame, bg = '#feffbe', width=10)
		tweakStarPositionEntry.insert(0,"0,0")
		tweakStarPositionEntry.grid(row=0,column=2,columnspan=3,pady=5,sticky=W)
		
		plotoptions = LabelFrame(self, bg = '#feffbe', text="Plot Options")
		plotoptions.grid(row=5, column=0,
			padx=5, sticky=E+W+S+N)
		
		
		plotchoiceFrame = Frame(plotoptions, bg = '#feffbe', )
		plotchoiceFrame.grid(row=0,column=0, sticky=W,pady=5)
		self.plotchoiceVar = IntVar()
		self.plotchoiceVar.set(0)
		
		pc1 = Radiobutton(plotchoiceFrame, bg = '#feffbe', text="Default", variable=self.plotchoiceVar, value=0).grid(row=0,column=1)
		pc2 = Radiobutton(plotchoiceFrame, bg = '#feffbe', text="Strip Image", variable=self.plotchoiceVar, value=1).grid(row=0,column=2)
		pc3 = Radiobutton(plotchoiceFrame, bg = '#feffbe', text="2x2", variable=self.plotchoiceVar, value=2).grid(row=0,column=3)
		
		plotFileTypeFrame = Frame(plotoptions, bg = '#feffbe')
		plotFileTypeFrame.grid(row=1,column=0, sticky=W,pady=5)
		self.plotFileTypeVar = IntVar()
		self.plotFileTypeVar.set(0)
		plotFileTypeLabel = Label(plotFileTypeFrame, bg = '#feffbe', text="Output File Type:")
		plotFileTypeLabel.grid(row=0,column=0)
		pft1 = Radiobutton(plotFileTypeFrame, bg = '#feffbe', text="PNG", variable=self.plotFileTypeVar, value=0).grid(row=0,column=1)
		pft2 = Radiobutton(plotFileTypeFrame, bg = '#feffbe', text="PDF", variable=self.plotFileTypeVar, value=1).grid(row=0,column=2)
		
		self.verboseOutputVar = BooleanVar()
		self.verboseOutputVar.set(False)
		verboseOutputCheck= Checkbutton(options, bg = '#feffbe', text="Verbose Output", variable=self.verboseOutputVar, offvalue=False, onvalue=True)
		verboseOutputCheck.grid(row=5,column=0, sticky=W)
		
		spectrumWidthFrame = Frame(plotoptions, bg = '#feffbe')
		spectrumWidthFrame.grid(row=3,column=0, sticky=W)
		spectrumWidthLabel= Label(spectrumWidthFrame, bg = '#feffbe', text="Spectrum Width:")
		spectrumWidthLabel.grid(row=0, column=0)
		
		spectrumWidthVar = StringVar(spectrumWidthFrame)
		spectrumWidthEntry = Entry(spectrumWidthFrame, bg = '#feffbe', width=5)
		spectrumWidthEntry.insert(0, "15")
		spectrumWidthEntry.grid(row=0, column=1, sticky=W, pady=4, padx=5)
		
		spectrumWidthPXlabel= Label(spectrumWidthFrame, bg = '#feffbe', text="pixels")
		spectrumWidthPXlabel.grid(row=0,column=2)
		
		yAxisFrame = Frame(plotoptions, bg = '#feffbe')
		yAxisLabel= Label(yAxisFrame, bg = '#feffbe', text="Y-Axis Min,Max:")
		yAxisLabel.grid(row=0, column=0)
		
		yAxisVar = StringVar(yAxisFrame)
		yAxisEntry = Entry(yAxisFrame, bg = '#feffbe', width=8)
		yAxisEntry.insert(0, "0,1.2")
		yAxisEntry.grid(row=0, column=1, sticky=W, pady=4, padx=5)
		yAxisEntry.bind("<Enter>",hoveryminmax)
		
		redShiftFrame = Frame(plotoptions, bg = '#feffbe')
		redShiftFrame.grid(row=5,column=0,sticky=W)
		redshiftLabel= Label(redShiftFrame, bg = '#feffbe', text="Redshift:")
		redshiftLabel.grid(row=0, column=0)
		
		redshiftVar = StringVar(redShiftFrame)
		redshiftEntry = Entry(redShiftFrame, bg = '#feffbe', width=8)
		redshiftEntry.insert(0, "0.0")
		redshiftEntry.grid(row=0, column=1, sticky=W, pady=4, padx=5)		
		redshiftEntry.bind("<Enter>",hoverRedShift)

		#Browse Button for Image
		bbtnImage = Button(fitsFrame, text="Browse", command=button_browse_callback)
		bbtnImage.grid(row=1, column=1, sticky=W)
		#Browse Button for Calibration .csv
		bbtncalibration = Button(calibrationFrame, text="Browse", command=button_browsecalibration_callback)
		bbtncalibration.grid(row=1, column=1, sticky=W)
		#Browse Button for Comparison Spectrum
		bbtnspectrum = Button(spectrumFrame, text="Browse", command=button_browsespectrum_callback)
		bbtnspectrum.grid(row=1, column=1, sticky=W)
		#Frame to hold Exit and About Buttons
		buttonframe = Frame(self, bg = '#feffbe')
		buttonframe.grid(row=6,column=0, sticky=W, pady=5)
		#Exit Button
		ebtn = Button(buttonframe, text="Exit", command=sys.exit)
		ebtn.grid(row=0,column=0)
		#About Button
		hbtn = Button(buttonframe, text="About", command=button_about_callback)
		hbtn.grid(row=0, column=1, padx=5, sticky=W)
		#Start Button
		sbtn = Button(self, text="Start", command=button_go_callback)
		sbtn.grid(row=6, column=2, padx=5, sticky=E)
		
		#Function for advanced options toggle
		def advanced_options_toggle():
			#If checkbox is checked
			if advancedOptionsVar.get():
				yAxisFrame.grid(row=4, column=0, sticky=W)
				weightingFrame.grid(row=3,column=0, sticky=W)
				tweakStarPositionFrame.grid(row=4,column=0, sticky=W)
				calibrationFrame.grid(row=2, column=0, columnspan=3,
					padx=5, rowspan=1, sticky=E+W+S+N)
				spectrumFrame.grid(row=3, column=0, columnspan=3,
					padx=5, rowspan=1, sticky=E+W+S+N)
			#If checkbox is unchecked	
			else:
				yAxisFrame.grid_forget()
				weightingFrame.grid_forget()
				tweakStarPositionFrame.grid_forget()
				calibrationFrame.grid_forget()
				spectrumFrame.grid_forget()
		#Advanced Options checkbox
		advancedOptionsVar = BooleanVar()
		advancedOptionsCheck= Checkbutton(self, bg = '#feffbe', text="Advanced Options", variable=advancedOptionsVar, command=advanced_options_toggle)
		advancedOptionsCheck.grid(row=6,column=1, sticky=W)

		#Status Text variable used for user messages at bottom of screen
		statusText = StringVar(self)
		statusText.set("Press Browse button or enter FITS filename, "
                   "then press the Start button")
		#Displays statusText Variable
		message = Label(self, bg = '#feffbe', textvariable=statusText)
		message.grid(row=7, column=0, columnspan=5)
              

def main():
  
    root = Tk()
    root.configure(bg = '#feffbe', highlightcolor='#feffbe')
    root.geometry("700x550+300+300")
    app = Example(root)
    root.mainloop()  
	
def read_fits(filename):
    """ Read the file    """
    try:
        hdulist = fits.open(filename)
    except:
        return None

    return hdulist


if __name__ == '__main__':
    main()  
